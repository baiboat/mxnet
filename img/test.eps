%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 403.000000 203.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1212) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 403 203
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 403 203
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /a put
dup 34 /one put
dup 35 /two put
dup 36 /six put
dup 37 /zero put
dup 38 /three put
dup 39 /four put
dup 40 /five put
dup 41 /nine put
dup 42 /comma put
dup 43 /space put
dup 44 /l put
dup 45 /i put
dup 46 /n put
dup 47 /e put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





00000048004800760122014801D002B602FC03940454050E0618068006AA06C4070C07420001000000110096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 17 dict dup begin
/.notdef 0 def
/space 1 def
/comma 2 def
/zero 3 def
/one 4 def
/two 5 def
/three 6 def
/four 7 def
/five 8 def
/six 9 def
/nine 10 def
/a 11 def
/e 12 def
/i 13 def
/l 14 def
/n 15 def
/uni2B91 16 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B322782D282AC603D1F5A452D1E7AE90B2FF78B151C731C717F5B5A44CD65CA03332FE505112E8ABE53EA94E80EF00D7A4EB3454C6C7AB4461BCF6C842CA3FFE91178BBE291EEE58B949D7F349A3EBC08CD302CA3D597FD22C0B7B07EB4878F61FB15F88EB8C0D6EAD80E18F761054672123F943E9FC0F78D134A790BE4BB6B00EE54AC2FC823309C4B80C9EE892138F6B777CC09A8CA19E0D227EE94C2663BFA0F3E52F6C0A7231054F80E942A6D6A1878608B1A144C9EA692F806BDF318C0A6ACA56F8349C4C82476D5AB8CD87EFEF23AC9DBF8858893F3D2AF13F989F5B34F24BE3A911F50344647E907DB3D1819A27ABE0A9E9367B20506ADF6D2EFF31D2048AADA1ADDA3E856E05D3250C4DCCEA06C45BBB6BFDA5C1784625D6C924B797B3B1DB6CF6393F9041A183FAF983091297803677345745F42EB9DCA4570825BA47A89F3D53FA6FE15825ADE5285B309A22269F5C9BF5996E8DFE91C80F0652B885F4CC05CF03946D4786CCA11D869A128352394E91AEDFF5CA35793B1D2637B7829AE123A52C9712F5CFF3E1578F0B892859A76FF77641D07FC2EDE262EA65BD343FD23A648BAE8892DD3B25896AAB7E7590011B5B556D2754C0ADB8770090C61E45ACEEEF7250A87C6433F8165CF1B21128BBD84B03800994D6606C44E58C5D9F280DB096D6909DD63C75523D95B66C01AE1E4DC1CA7290C0E121EE32C95AE224379B31033771E50621AB7C6A2DE4D603086942722AE350A7D44917E8997AB8

A69DAB792CA75A6F0AEFB503B563B73674DF29E6B7784EBCDB7EC37139123F4C600BF073CE87F6DE6993CEC073E8190C4F8BF942127B0F8B9045F495102D5C8FFDF620043234526FC6E932D1AD7C45B31C4CCA0A951D845F75B46A5735C6AD671BC25CC128C2A75DAE8FF21E0B5C020624165874E5A4655EB243A5C71EE4183FB42E65896ED1585CC829D5145C35D83850DB13DE17000335789B0EB11A16A3E2A364962D227B1E08A88673C4090325208CAB801B5159DF109B6BD9B919C9B68D5D2D621B3A6945A8292AD74C25170A59DBF813F6072699624818057FCD1D0135F6CEF142F62804645C731386AAD740611E67BC438FD61F1D5C1E60762F05C7966782194C54DF67A8A7C8864FC17A6D20C666083313531B65576BD048E2695D33F3EB386F142C7E10FE60BFA9B09962D493083E579F68CC8C45305CAB7F62EE920E7B1E3DB4EE76F8BFD7CB51D416F0BEB52537248E5E76F042B6FF8C78BD07C7F79229F84721357C807DDB80153D86BB8360EACCE72EB305220C45F5310533DD10EADF11AA0E8B7629D75F0DF7AE8A53D60DCAA766E0BBF1ADCD7202CC3E00D585E89A59A007E0CB309069DDA47567CAE3BDB6DBB73B4D629AE718831D2AFF1BF8284242E7037B91B91E343744E908F8B6EE9195310C71DB8694E7261832C33BE5EBCC71C216FFA4D53915C454CE68F58A77EEDD267A85FC30E16B27378FF36F6CABC82B1FB616C267658EEA779C6DAA085A9903E7665BE11B8F2A03A4A23264C249F5185627B1E3795F13CA6032793E070B5BCAD73444D3E2EED98706AA71A5C2C2BE5068B1603F360B30424FE343E06704279825E2C0D6DAFE88DAA52FB3F75D4F905B819047A6968277354C722A6DC5D66421CEA396C7B3B8AFB1E8252375FB1BFBCD5B146CD0F383B989EB09D4E6D3FABBEAB4CDDF8B66923800DB55DF8921590FC28CBA4DE0E7837B9247F680E9BF032A74305631C0AE1AD0D6902C895D950167985B1EE1C074169699521F8A476337CFBF4C3392E2194450C1F762FF22251DC92DB76C52C18C3F1E432BE1B445063AB9D60F3D27DECBB0B9157FBFA604FD6C3AEEBD228593E6E805AADF0853A321A30A3C8325475AD7251F3096DE04D507EC62F2173E43BF057A7C1F7D9ADBBD6616F1EA234F4D0568D451CA0D93A3B04FB22F71B36B0318770E8CA12D90674EDD6863030F53C3CC0431F02EC521D0F7C2F7F598B866651514A82506581263389B90DD6ABC77295449E3BBAF63FF32E6936E3833D130A0D17EF17329C4B4BA770AB4A5CD48A2931294BF06AC019E9B6A1B18DFC8234E4364C3BE7AAFE1B3A370261E4A5925B6FAF63512E5425FBE3A22AFD64D01112A0C9276FCDFE18D252E83BFD1BF3C664FD3F758BCFCD6FA33E1F32385D049639688D2C753686498459B43AA155B64037C4DF3CEA3E927576B9706
8C2C4FC41D08A28152C1ED5F98639156612A54D055A6E7EC74B94611156990104C68678AA3C2FEB5AB66B3155B79F41B7FF806A5E5E088F453868EE6A367C5FEC75C0ECFD8761A6A4E969B008B1BD143B32D6CEF6632F35D2AE6A941DBF0150D826C9BCE94D07A5B4F32C73563D4C8C7DD6BCD6B32D324549445B9822494C0248AAC5180E0E4705ADCAFC430D78E44A9318771A97AB730A416E6F6882DAFA365F8C70E8FBE80CD15BD309E778F1DFA3E648B5E47CEB1C7286CFC16ECF7D1A4F3A0C50E7008270AEF902DF49D2918ABBA0784CF395922EE6AA2ECDEC6828865AF912F4AD69388A5903489ABDEA0C20DB67518F8D4908E922FB89A1FEE968A4B314C7BF71132D404AB14C0578FD4A6AE9F86144C5A544A27239739314056BFBCF62A541EB305B2588075210E9D075850B567267436D8F10593976E7A36D56276FB2470E52B35E5748A573712C06862A88EE1CB560F9E22DED643F0D05C53CDE8561EA926873A0A69400F13502AFAE8CD4F24FA15538411512E9066B77114B5A3DE0072D444171D930C678ED281321853470279198CB3F88A461CE651F7C7D8B9B5093F8273FEDC7B8916A0786533B0A9B57EDCF83427A3E6BC9973E3C5770B96686AC068B8791F4E5B04FC6BF8E8DBCD3B7C4AC8CDC5950C35C5CA6D97D02C4D4883D8E5307DA7A4375A0B22521563BC72B62874CEAD24CA599357A823C6D18F3168B2DF2B2FD006DF6641D59D1C5891700FE22FE46AF6F84020E2A7EA2B50C3A9068F8C297B390AD36F36FB1AB233428CA1CFE7CB77B185D001DA39F7C2DC4D3944D07C89E5561D8B3B713223360A5860E81465BB07
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 403 203 rc
116.5 188.5 m
158.5 188.5 l
158.5 153.5 l
116.5 153.5 l
h
116.5 189 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 1 202 cm
115.5 13.5 m
157.5 13.5 l
157.5 48.5 l
115.5 48.5 l
h
115.5 13 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 137.25 171.25 cm
/F1.1[ 12 0 0 -12 0 0]sf
-9.8940001 3.8320007 m
(!"#)[ 6.444000 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
348.5 183.5 m
394.5 183.5 l
394.5 148.5 l
348.5 148.5 l
h
348.5 184 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 1 202 cm
347.5 18.5 m
393.5 18.5 l
393.5 53.5 l
347.5 53.5 l
h
347.5 18 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 371.25 166.25 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.192 5.776001 m
(!"$)[ 8.592000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
1.5 201.5 m
30.5 201.5 l
30.5 171.5 l
1.5 171.5 l
h
1 202 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 1 202 cm
0.5 0.5 m
29.5 0.5 l
29.5 30.5 l
0.5 30.5 l
h
0 0 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 15.5 186.75 cm
/F1.1[ 10 0 0 -10 0 0]sf
-8.2449999 3.8600006 m
(!"%)[ 5.370000 5.560000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
50.5 186.5 m
91.5 186.5 l
91.5 156.5 l
50.5 156.5 l
h
50 187 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 1 202 cm
49.5 15.5 m
90.5 15.5 l
90.5 45.5 l
49.5 45.5 l
h
49 15 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 70.75 171.75 cm
/F1.1[ 11 0 0 -11 0 0]sf
-9.0695 3.8460007 m
(!"")[ 5.907000 6.116000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
182.5 181.5 m
227.5 181.5 l
227.5 156.5 l
182.5 156.5 l
h
182 181.5 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 1 202 cm
181.5 20.5 m
226.5 20.5 l
226.5 45.5 l
181.5 45.5 l
h
181 20.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 204.75 169 cm
/F1.1[ 13 0 0 -13 0 0]sf
-10.7185 4.3180008 m
(!"&)[ 6.981000 7.228000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
241.5 188.5 m
275.5 188.5 l
275.5 163.5 l
241.5 163.5 l
h
241.5 189 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 1 202 cm
240.5 13.5 m
274.5 13.5 l
274.5 38.5 l
240.5 38.5 l
h
240.5 13 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 258.5 176.5 cm
/F1.1[ 14 0 0 -14 0 0]sf
-11.543 4.8040009 m
(!"')[ 7.518000 7.784000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
288.5 172.5 m
329.5 172.5 l
329.5 142.5 l
288.5 142.5 l
h
288 173 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 1 202 cm
287.5 29.5 m
328.5 29.5 l
328.5 59.5 l
287.5 59.5 l
h
287 29 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 308.75 157.75 cm
/F1.1[ 15 0 0 -15 0 0]sf
-12.3675 5.2900009 m
(!"\()[ 8.055000 8.340000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
348.5 45.5 m
401.5 45.5 l
401.5 1.5 l
348.5 1.5 l
h
348 46 m
f
3 w
0.60000002 i
0 0 0 sc
1 0 0 -1 1 202 cm
347.5 156.5 m
400.5 156.5 l
400.5 200.5 l
347.5 200.5 l
h
347 156 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 374.5 24 cm
/F1.1[ 9 0 0 -9 0 0]sf
-16.839001 3.3740005 m
(!\)*+,-./&)[ 4.833000 5.004000 2.502000 2.502000 1.998000 1.998000 5.004000 4.833000 0.000000 ] xS
/Cs1 SC
1 1 0.75 sc
CM
217 27 m
295 27 l
295 2 l
217 2 l
h
217 27 m
f
2 w
0.60000002 i
0 0 0 sc
1 0 0 -1 1 202 cm
216 175 m
294 175 l
294 200 l
216 200 l
h
216 175 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 256.25 14.5 cm
/F1.1[ 13 0 0 -13 0 0]sf
-27.937 4.3180008 m
(!"&*+,-./#)[ 6.981000 7.228000 7.228000 3.614000 3.614000 2.886000 2.886000 7.228000 6.981000 0.000000 ] xS
/Cs1 SC
0.75 1 1 sc
CM
217 76 m
295 76 l
295 51 l
217 51 l
h
217 76.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 1 202 cm
216 126 m
294 126 l
294 151 l
216 151 l
h
216 125.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 256.25 64 cm
-27.937 4.3180008 m
(!"&*+,-./#)[ 6.981000 7.228000 7.228000 3.614000 3.614000 2.886000 2.886000 7.228000 6.981000 0.000000 ] xS
/Cs1 SC
0.75 1 0.75 sc
CM
217 128 m
295 128 l
295 103 l
217 103 l
h
217 128.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 1 202 cm
216 74 m
294 74 l
294 99 l
216 99 l
h
216 73.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 256.25 116 cm
-27.937 4.3180008 m
(!"&*+,-./#)[ 6.981000 7.228000 7.228000 3.614000 3.614000 2.886000 2.886000 7.228000 6.981000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 1 202 cm
255.25 174.5 m
255.25 163.89999 l
S
0 J
0 j
0 i
255.25 154.3 m
255.25 163.89999 l
251.64999 163.89999 m
255.25 154.3 l
258.85001 163.89999 l
S
1 J
1 j
0.60000002 i
254.75 123.5 m
254.75 111.4 l
S
0 J
0 j
0 i
254.75 101.8 m
254.75 111.4 l
251.14999 111.4 m
254.75 101.8 l
258.35001 111.4 l
S
1 0.75 1 sc
CM
84 27 m
163 27 l
163 2 l
84 2 l
h
84.5 27 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 1 202 cm
83 175 m
162 175 l
162 200 l
83 200 l
h
83.5 175 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 123.75 14.5 cm
/F1.1[ 11 0 0 -11 0 0]sf
-23.639 3.8460007 m
(!""*+,-./#)[ 5.907000 6.116000 6.116000 3.058000 3.058000 2.442000 2.442000 6.116000 5.907000 0.000000 ] xS
/Cs1 SC
1 0.75 0.75 sc
CM
84 76 m
163 76 l
163 51 l
84 51 l
h
84.5 76.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 1 202 cm
83 126 m
162 126 l
162 151 l
83 151 l
h
83.5 125.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 123.75 64 cm
-23.639 3.8460007 m
(!""*+,-./#)[ 5.907000 6.116000 6.116000 3.058000 3.058000 2.442000 2.442000 6.116000 5.907000 0.000000 ] xS
/Cs1 SC
0.75 0.75 1 sc
CM
84 128 m
163 128 l
163 103 l
84 103 l
h
84.5 128.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 1 202 cm
83 74 m
162 74 l
162 99 l
83 99 l
h
83.5 73.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 123.75 116 cm
-23.639 3.8460007 m
(!""*+,-./#)[ 5.907000 6.116000 6.116000 3.058000 3.058000 2.442000 2.442000 6.116000 5.907000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 1 202 cm
122.75 174.5 m
122.75 163.89999 l
S
0 J
0 j
0 i
122.75 154.3 m
122.75 163.89999 l
119.15 163.89999 m
122.75 154.3 l
126.35 163.89999 l
S
1 J
1 j
0.60000002 i
122.25 123.5 m
122.25 111.4 l
S
0 J
0 j
0 i
122.25 101.8 m
122.25 111.4 l
118.65 111.4 m
122.25 101.8 l
125.85 111.4 l
S
ep
end
%%Trailer
%%EOF
